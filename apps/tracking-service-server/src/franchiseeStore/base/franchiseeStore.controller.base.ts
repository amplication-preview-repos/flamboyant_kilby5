/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FranchiseeStoreService } from "../franchiseeStore.service";
import { FranchiseeStoreCreateInput } from "./FranchiseeStoreCreateInput";
import { FranchiseeStore } from "./FranchiseeStore";
import { FranchiseeStoreFindManyArgs } from "./FranchiseeStoreFindManyArgs";
import { FranchiseeStoreWhereUniqueInput } from "./FranchiseeStoreWhereUniqueInput";
import { FranchiseeStoreUpdateInput } from "./FranchiseeStoreUpdateInput";

export class FranchiseeStoreControllerBase {
  constructor(protected readonly service: FranchiseeStoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FranchiseeStore })
  async createFranchiseeStore(
    @common.Body() data: FranchiseeStoreCreateInput
  ): Promise<FranchiseeStore> {
    return await this.service.createFranchiseeStore({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FranchiseeStore] })
  @ApiNestedQuery(FranchiseeStoreFindManyArgs)
  async franchiseeStores(
    @common.Req() request: Request
  ): Promise<FranchiseeStore[]> {
    const args = plainToClass(FranchiseeStoreFindManyArgs, request.query);
    return this.service.franchiseeStores({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FranchiseeStore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async franchiseeStore(
    @common.Param() params: FranchiseeStoreWhereUniqueInput
  ): Promise<FranchiseeStore | null> {
    const result = await this.service.franchiseeStore({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FranchiseeStore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFranchiseeStore(
    @common.Param() params: FranchiseeStoreWhereUniqueInput,
    @common.Body() data: FranchiseeStoreUpdateInput
  ): Promise<FranchiseeStore | null> {
    try {
      return await this.service.updateFranchiseeStore({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FranchiseeStore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFranchiseeStore(
    @common.Param() params: FranchiseeStoreWhereUniqueInput
  ): Promise<FranchiseeStore | null> {
    try {
      return await this.service.deleteFranchiseeStore({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
