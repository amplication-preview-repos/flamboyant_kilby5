/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BikesetuYard } from "./BikesetuYard";
import { BikesetuYardCountArgs } from "./BikesetuYardCountArgs";
import { BikesetuYardFindManyArgs } from "./BikesetuYardFindManyArgs";
import { BikesetuYardFindUniqueArgs } from "./BikesetuYardFindUniqueArgs";
import { DeleteBikesetuYardArgs } from "./DeleteBikesetuYardArgs";
import { BikesetuYardService } from "../bikesetuYard.service";
@graphql.Resolver(() => BikesetuYard)
export class BikesetuYardResolverBase {
  constructor(protected readonly service: BikesetuYardService) {}

  async _bikesetuYardsMeta(
    @graphql.Args() args: BikesetuYardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BikesetuYard])
  async bikesetuYards(
    @graphql.Args() args: BikesetuYardFindManyArgs
  ): Promise<BikesetuYard[]> {
    return this.service.bikesetuYards(args);
  }

  @graphql.Query(() => BikesetuYard, { nullable: true })
  async bikesetuYard(
    @graphql.Args() args: BikesetuYardFindUniqueArgs
  ): Promise<BikesetuYard | null> {
    const result = await this.service.bikesetuYard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BikesetuYard)
  async deleteBikesetuYard(
    @graphql.Args() args: DeleteBikesetuYardArgs
  ): Promise<BikesetuYard | null> {
    try {
      return await this.service.deleteBikesetuYard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
