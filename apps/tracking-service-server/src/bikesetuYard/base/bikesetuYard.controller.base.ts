/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BikesetuYardService } from "../bikesetuYard.service";
import { BikesetuYardCreateInput } from "./BikesetuYardCreateInput";
import { BikesetuYard } from "./BikesetuYard";
import { BikesetuYardFindManyArgs } from "./BikesetuYardFindManyArgs";
import { BikesetuYardWhereUniqueInput } from "./BikesetuYardWhereUniqueInput";
import { BikesetuYardUpdateInput } from "./BikesetuYardUpdateInput";

export class BikesetuYardControllerBase {
  constructor(protected readonly service: BikesetuYardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BikesetuYard })
  async createBikesetuYard(
    @common.Body() data: BikesetuYardCreateInput
  ): Promise<BikesetuYard> {
    return await this.service.createBikesetuYard({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BikesetuYard] })
  @ApiNestedQuery(BikesetuYardFindManyArgs)
  async bikesetuYards(@common.Req() request: Request): Promise<BikesetuYard[]> {
    const args = plainToClass(BikesetuYardFindManyArgs, request.query);
    return this.service.bikesetuYards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BikesetuYard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bikesetuYard(
    @common.Param() params: BikesetuYardWhereUniqueInput
  ): Promise<BikesetuYard | null> {
    const result = await this.service.bikesetuYard({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BikesetuYard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBikesetuYard(
    @common.Param() params: BikesetuYardWhereUniqueInput,
    @common.Body() data: BikesetuYardUpdateInput
  ): Promise<BikesetuYard | null> {
    try {
      return await this.service.updateBikesetuYard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BikesetuYard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBikesetuYard(
    @common.Param() params: BikesetuYardWhereUniqueInput
  ): Promise<BikesetuYard | null> {
    try {
      return await this.service.deleteBikesetuYard({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
