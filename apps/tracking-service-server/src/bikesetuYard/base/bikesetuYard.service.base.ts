/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BikesetuYard as PrismaBikesetuYard } from "@prisma/client";

export class BikesetuYardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BikesetuYardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bikesetuYard.count(args);
  }

  async bikesetuYards(
    args: Prisma.BikesetuYardFindManyArgs
  ): Promise<PrismaBikesetuYard[]> {
    return this.prisma.bikesetuYard.findMany(args);
  }
  async bikesetuYard(
    args: Prisma.BikesetuYardFindUniqueArgs
  ): Promise<PrismaBikesetuYard | null> {
    return this.prisma.bikesetuYard.findUnique(args);
  }
  async createBikesetuYard(
    args: Prisma.BikesetuYardCreateArgs
  ): Promise<PrismaBikesetuYard> {
    return this.prisma.bikesetuYard.create(args);
  }
  async updateBikesetuYard(
    args: Prisma.BikesetuYardUpdateArgs
  ): Promise<PrismaBikesetuYard> {
    return this.prisma.bikesetuYard.update(args);
  }
  async deleteBikesetuYard(
    args: Prisma.BikesetuYardDeleteArgs
  ): Promise<PrismaBikesetuYard> {
    return this.prisma.bikesetuYard.delete(args);
  }
}
