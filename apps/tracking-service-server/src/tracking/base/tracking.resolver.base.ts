/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tracking } from "./Tracking";
import { TrackingCountArgs } from "./TrackingCountArgs";
import { TrackingFindManyArgs } from "./TrackingFindManyArgs";
import { TrackingFindUniqueArgs } from "./TrackingFindUniqueArgs";
import { CreateTrackingArgs } from "./CreateTrackingArgs";
import { UpdateTrackingArgs } from "./UpdateTrackingArgs";
import { DeleteTrackingArgs } from "./DeleteTrackingArgs";
import { TrackingService } from "../tracking.service";
@graphql.Resolver(() => Tracking)
export class TrackingResolverBase {
  constructor(protected readonly service: TrackingService) {}

  async _trackingsMeta(
    @graphql.Args() args: TrackingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tracking])
  async trackings(
    @graphql.Args() args: TrackingFindManyArgs
  ): Promise<Tracking[]> {
    return this.service.trackings(args);
  }

  @graphql.Query(() => Tracking, { nullable: true })
  async tracking(
    @graphql.Args() args: TrackingFindUniqueArgs
  ): Promise<Tracking | null> {
    const result = await this.service.tracking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tracking)
  async createTracking(
    @graphql.Args() args: CreateTrackingArgs
  ): Promise<Tracking> {
    return await this.service.createTracking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Tracking)
  async updateTracking(
    @graphql.Args() args: UpdateTrackingArgs
  ): Promise<Tracking | null> {
    try {
      return await this.service.updateTracking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tracking)
  async deleteTracking(
    @graphql.Args() args: DeleteTrackingArgs
  ): Promise<Tracking | null> {
    try {
      return await this.service.deleteTracking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
