/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrackingService } from "../tracking.service";
import { TrackingCreateInput } from "./TrackingCreateInput";
import { Tracking } from "./Tracking";
import { TrackingFindManyArgs } from "./TrackingFindManyArgs";
import { TrackingWhereUniqueInput } from "./TrackingWhereUniqueInput";
import { TrackingUpdateInput } from "./TrackingUpdateInput";

export class TrackingControllerBase {
  constructor(protected readonly service: TrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tracking })
  async createTracking(
    @common.Body() data: TrackingCreateInput
  ): Promise<Tracking> {
    return await this.service.createTracking({
      data: data,
      select: {
        createdAt: true,
        customerId: true,
        deliveryStatus: true,
        id: true,
        review: true,
        trackingId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tracking] })
  @ApiNestedQuery(TrackingFindManyArgs)
  async trackings(@common.Req() request: Request): Promise<Tracking[]> {
    const args = plainToClass(TrackingFindManyArgs, request.query);
    return this.service.trackings({
      ...args,
      select: {
        createdAt: true,
        customerId: true,
        deliveryStatus: true,
        id: true,
        review: true,
        trackingId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tracking(
    @common.Param() params: TrackingWhereUniqueInput
  ): Promise<Tracking | null> {
    const result = await this.service.tracking({
      where: params,
      select: {
        createdAt: true,
        customerId: true,
        deliveryStatus: true,
        id: true,
        review: true,
        trackingId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTracking(
    @common.Param() params: TrackingWhereUniqueInput,
    @common.Body() data: TrackingUpdateInput
  ): Promise<Tracking | null> {
    try {
      return await this.service.updateTracking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          customerId: true,
          deliveryStatus: true,
          id: true,
          review: true,
          trackingId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTracking(
    @common.Param() params: TrackingWhereUniqueInput
  ): Promise<Tracking | null> {
    try {
      return await this.service.deleteTracking({
        where: params,
        select: {
          createdAt: true,
          customerId: true,
          deliveryStatus: true,
          id: true,
          review: true,
          trackingId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
