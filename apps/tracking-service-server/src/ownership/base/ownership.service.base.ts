/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ownership as PrismaOwnership } from "@prisma/client";

export class OwnershipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OwnershipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ownership.count(args);
  }

  async ownerships(
    args: Prisma.OwnershipFindManyArgs
  ): Promise<PrismaOwnership[]> {
    return this.prisma.ownership.findMany(args);
  }
  async ownership(
    args: Prisma.OwnershipFindUniqueArgs
  ): Promise<PrismaOwnership | null> {
    return this.prisma.ownership.findUnique(args);
  }
  async createOwnership(
    args: Prisma.OwnershipCreateArgs
  ): Promise<PrismaOwnership> {
    return this.prisma.ownership.create(args);
  }
  async updateOwnership(
    args: Prisma.OwnershipUpdateArgs
  ): Promise<PrismaOwnership> {
    return this.prisma.ownership.update(args);
  }
  async deleteOwnership(
    args: Prisma.OwnershipDeleteArgs
  ): Promise<PrismaOwnership> {
    return this.prisma.ownership.delete(args);
  }
}
