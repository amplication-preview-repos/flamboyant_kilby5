/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OwnershipService } from "../ownership.service";
import { OwnershipCreateInput } from "./OwnershipCreateInput";
import { Ownership } from "./Ownership";
import { OwnershipFindManyArgs } from "./OwnershipFindManyArgs";
import { OwnershipWhereUniqueInput } from "./OwnershipWhereUniqueInput";
import { OwnershipUpdateInput } from "./OwnershipUpdateInput";

export class OwnershipControllerBase {
  constructor(protected readonly service: OwnershipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ownership })
  async createOwnership(
    @common.Body() data: OwnershipCreateInput
  ): Promise<Ownership> {
    return await this.service.createOwnership({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ownership] })
  @ApiNestedQuery(OwnershipFindManyArgs)
  async ownerships(@common.Req() request: Request): Promise<Ownership[]> {
    const args = plainToClass(OwnershipFindManyArgs, request.query);
    return this.service.ownerships({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ownership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ownership(
    @common.Param() params: OwnershipWhereUniqueInput
  ): Promise<Ownership | null> {
    const result = await this.service.ownership({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ownership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOwnership(
    @common.Param() params: OwnershipWhereUniqueInput,
    @common.Body() data: OwnershipUpdateInput
  ): Promise<Ownership | null> {
    try {
      return await this.service.updateOwnership({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ownership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOwnership(
    @common.Param() params: OwnershipWhereUniqueInput
  ): Promise<Ownership | null> {
    try {
      return await this.service.deleteOwnership({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
