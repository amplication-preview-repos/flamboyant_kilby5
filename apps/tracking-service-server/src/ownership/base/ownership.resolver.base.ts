/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ownership } from "./Ownership";
import { OwnershipCountArgs } from "./OwnershipCountArgs";
import { OwnershipFindManyArgs } from "./OwnershipFindManyArgs";
import { OwnershipFindUniqueArgs } from "./OwnershipFindUniqueArgs";
import { DeleteOwnershipArgs } from "./DeleteOwnershipArgs";
import { OwnershipService } from "../ownership.service";
@graphql.Resolver(() => Ownership)
export class OwnershipResolverBase {
  constructor(protected readonly service: OwnershipService) {}

  async _ownershipsMeta(
    @graphql.Args() args: OwnershipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ownership])
  async ownerships(
    @graphql.Args() args: OwnershipFindManyArgs
  ): Promise<Ownership[]> {
    return this.service.ownerships(args);
  }

  @graphql.Query(() => Ownership, { nullable: true })
  async ownership(
    @graphql.Args() args: OwnershipFindUniqueArgs
  ): Promise<Ownership | null> {
    const result = await this.service.ownership(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ownership)
  async deleteOwnership(
    @graphql.Args() args: DeleteOwnershipArgs
  ): Promise<Ownership | null> {
    try {
      return await this.service.deleteOwnership(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
